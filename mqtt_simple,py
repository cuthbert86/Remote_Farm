import network
import usocket
from time import time, sleep
from umqtt.simple import MQTTClient
import machine
from picozero import pico_temp_sensor
from machine import Pin
import micropython
import ustruct as struct
import json


adcpin = 4
sensor = machine.ADC(adcpin)
sock = usocket
SSID = 'BB'
PASSWORD = b'6KH1jk1mn0s'
broker_address = "e5d2174059b64286bd5f243dd055355a.s1.eu.hivemq.cloud:8884/mqtt"

mqtt_username = "CB_1986"
mqtt_password = 'Cbaines123!'
TOPIC = "data1"
wlan = network.WLAN(network.STA_IF)
mqtt = MQTTClient
sending = broker_address
#addr = usocket.getaddrinfo(192.168.1.20:80)[0][-1]
#s = socket.socket()
#s.bind(addr)
#s.listen()

def connect_to_wifi():
    wlan.active(True)
    wlan.connect(SSID, PASSWORD)
    print("Connecting to Wi-Fi...")
    while not wlan.isconnected():
        sleep(5)
        print("Waiting for connection...")
    else:
        print("Wi-Fi connected!")
        print("IP address:", wlan.ifconfig())
    
connect_to_wifi()

def connect(client, userdata, flags, rc, properties=None):
    print("CONNACK received with code %s." % rc)

# with this callback you can see if your publish was successful
def publish(client, userdata, mid, properties=None):
    print("mid: " + str(mid))


def message(client, userdata, msg):
    print(msg.topic + " " + str(msg.qos) + " " + str(msg.payload))

def connectMQTT():
    client = MQTTClient(client_id=mqtt_username)
    server = broker_address
    port = 8884
    user = mqtt_username
    password = mqtt_password
    keepalive = 7200
    ssl=False
    client.connect()
    message = ReadTemperature()
    return client
    
client = connectMQTT


def ReadTemperature():
    adc_value = sensor.read_u16()
    volt = (3.3/65535) * adc_value
    temperature = 27 - (volt - 0.706)/0.001721
    temp = round(temperature, 1)
    print(temp)
    return temp



# using MQTT version 5 here, for 3.1.1: MQTTv311, 3.1: MQTTv31
# userdata is user defined data of any type, updated by user_data_set()
# client_id is the given name of the client

# enable TLS for secure connection
 client.username_pw_set("CB_1986", 'Cbaines123!')
# connect to HiveMQ Cloud on port 8883 (default for MQTT)
 client.connect("e5d2174059b64286bd5f243dd055355a.s1.eu.hivemq.cloud", 8883)

# setting callbacks, use separate functions like above for better visibility
 client.subscribe = subscribe
 client.message = message
 client.publish = publish


# subscribe to all topics of encyclopedia by using the wildcard "#"
# client.subscribe("data1", qos=1)

# a single publish, this can also be done in loops, etc.
# client.publish(ReadTemperature(temp), payload="hot", qos=1)



temperature = ReadTemperature()
json_dictionary = '{"temperature":"27"}'
data1 = json.loads(json_dictionary)
data1 = {
    "temperature": str(ReadTemperature())
                            }
msg1 = json.dumps(data1)
connect_to_wifi()



while wlan.active(True):
    temperature = ReadTemperature()
    msg1 = json.dumps(temperature)
    connect_to_wifi()
    payload = msg1
#    client.subscribe(topic="data1")
    client.publish(TOPIC, payload)
    mqtt.publish('CB_1986', 'data1', payload)
    client.publish(mqtt, TOPIC, payload, qos=0)
    client.message(mqtt_username, mqtt_password, msg1)
    
else:
    print("disconnected")

